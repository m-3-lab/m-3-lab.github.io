{"version":3,"file":"component---src-pages-people-index-js-ee74944262bca1855f60.js","mappings":"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","sources":["webpack://m-3-lab/./src/components/people/portrait.js","webpack://m-3-lab/./src/components/people/people.js","webpack://m-3-lab/./src/components/people/alumni-table.js","webpack://m-3-lab/./src/components/people/people-container.js","webpack://m-3-lab/./src/pages/people/index.js","webpack://m-3-lab/./src/images/people/placeholder.inline.svg"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { GatsbyImage } from 'gatsby-plugin-image';\n\nimport Placeholder from '../../images/people/placeholder.inline.svg';\n\nconst Portrait = ({\n  name,\n  image,\n}) => (\n  image\n    ? (\n      <GatsbyImage\n        alt={name}\n        className=\"people__list-image\"\n        image={image.childImageSharp.gatsbyImageData}\n      />\n    )\n    : (\n      <div className=\"people__list-image\">\n        <Placeholder />\n      </div>\n    )\n);\n\nPortrait.defaultProps = {\n  image: null,\n};\n\nPortrait.propTypes = {\n  image: PropTypes.shape({\n    childImageSharp: PropTypes.shape({\n      gatsbyImageData: PropTypes.shape({}),\n    }),\n  }),\n  name: PropTypes.string.isRequired,\n};\n\nexport default Portrait;\n","/* eslint-disable react/no-danger */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUsers } from '@fortawesome/free-solid-svg-icons';\n\nimport Link from '../link/link';\nimport Portrait from './portrait';\n\nimport './people.css';\n\nconst People = ({\n  markdown,\n}) => (\n  <div className=\"people\">\n    <section>\n      <header>\n        <h1>\n          Our Team\n        </h1>\n        <FontAwesomeIcon icon={faUsers} size=\"2x\" />\n      </header>\n      <ul className=\"people__list\">\n        {\n          markdown.map((person) => (\n            <li key={person.node.frontmatter.name}>\n              <Portrait\n                image={person.node.frontmatter.image}\n                name={person.node.frontmatter.name}\n              />\n              <div>\n                <h2>{person.node.frontmatter.name}</h2>\n                {\n                  person.node.frontmatter.title\n                  && (\n                    <h3>{person.node.frontmatter.title}</h3>\n                  )\n                }\n                {\n                  person.node.frontmatter.email\n                  && (\n                    <Link\n                      className=\"person__list-email\"\n                      to={`mailto:${person.node.frontmatter.email}`}\n                    >\n                      {person.node.frontmatter.email}\n                    </Link>\n                  )\n                }\n                <div dangerouslySetInnerHTML={{ __html: person.node.html }} />\n              </div>\n            </li>\n          ))\n        }\n      </ul>\n    </section>\n  </div>\n);\n\nPeople.propTypes = {\n  markdown: PropTypes.arrayOf(\n    PropTypes.shape({\n      node: PropTypes.shape({\n        frontmatter: PropTypes.shape({\n          email: PropTypes.string,\n          image: PropTypes.shape({}),\n          name: PropTypes.string,\n          title: PropTypes.string,\n        }),\n        html: PropTypes.node,\n      }),\n    }),\n  ).isRequired,\n};\n\nexport default People;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUsers } from '@fortawesome/free-solid-svg-icons';\nimport './alumni-table.css';\nimport './people.css';\n\nconst AlumniTable = ({ alumni }) => {\n  const renderCurrentPositionLinks = (currentPosition) => {\n    if (!currentPosition || currentPosition.length === 0) {\n      return <span>No Current Position Information Available</span>;\n    }\n\n    return currentPosition.map((position, index) => {\n      const { description, linkText, linkUrl } = position || {};\n\n      return (\n        <React.Fragment key={index}>\n          {description && <span>{description}</span>}\n          {linkUrl && (\n            <>\n              {' '}\n              <a href={linkUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                {linkText || linkUrl}\n              </a>\n            </>\n          )}\n          {index < currentPosition.length - 1 && <span>, </span>}\n        </React.Fragment>\n      );\n    });\n  };\n\n  const safeValue = (value, fallback) => {\n    return typeof value === 'string' && value.trim() ? value : fallback;\n  };\n\n  return (\n    <div className=\"alumni-header\">\n      <section>\n        <header>\n          <h1>\n            <FontAwesomeIcon icon={faUsers} /> Alumni Directory\n          </h1>\n          {/* <p>A comprehensive list of our distinguished graduates</p> Uncomment when we have alumni*/}\n          <p>No alumni yet, check back later</p> {/* Remove Once we have alumni*/}\n        </header>\n      \n\n        <table className=\"alumni-table\">\n          <thead>\n            <tr>\n              <th scope=\"col\">Name</th>\n              <th scope=\"col\">Graduation Year</th>\n              <th scope=\"col\">Publications</th>\n              <th scope=\"col\">Current Position</th>\n            </tr>\n          </thead>\n          <tbody>\n            {alumni.length > 0 ? (\n              alumni.map((alumnus, index) => {\n                const {\n                  name = 'No Name Provided',\n                  graduationYear = 'N/A',\n                  publications = 'N/A',\n                  currentPosition = [],\n                } = alumnus || {};\n\n                return (\n                  <tr key={index}>\n                    <td>{safeValue(name, 'No Name Provided')}</td>\n                    <td>{safeValue(graduationYear, 'N/A')}</td>\n                    <td>{safeValue(publications, 'N/A')}</td>\n                    <td>{renderCurrentPositionLinks(currentPosition)}</td>\n                  </tr>\n                );\n              })\n            ) : (\n              <tr>\n                <td colSpan=\"4\">No Alumni Data Available</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n        </section>\n    </div>\n  );\n};\n\nexport default AlumniTable;\n","import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport People from './people';\nimport AlumniTable from './alumni-table'; // Import the AlumniTable component\nimport sortMarkdown from '../../utils/sort-markdown';\n\nconst PeopleContainer = () => {\n  const query = useStaticQuery(\n    graphql`\n      query {\n        currentPeople: allMarkdownRemark(\n          filter: { fileAbsolutePath: { regex: \"/people/current/\" } }\n        ) {\n          edges {\n            node {\n              html\n              frontmatter {\n                email\n                image {\n                  childImageSharp {\n                    gatsbyImageData(\n                      quality: 70,\n                      placeholder: BLURRED,\n                      height: 300,\n                      width: 300,\n                    )\n                  }\n                }\n                name\n                title\n                order\n              }\n            }\n          }\n        }\n\n        alumni: allMarkdownRemark(\n          filter: { fileAbsolutePath: { regex: \"/people/alumni/\" } }\n        ) {\n          edges {\n            node {\n              frontmatter {\n                name\n                graduationYear\n                publications\n                currentPosition {\n                  description\n                  linkText\n                  linkUrl\n               }\n              }\n            }\n          }\n        }\n      }\n    `\n  );\n\n\n\n  // Sorting current people\n  const currentPeople = sortMarkdown(query.currentPeople.edges, ['order', 'name']);\n  \n  // Extracting alumni data\n  const alumni = query.alumni.edges.map(({ node }) => node.frontmatter);\n\n\n  return (\n    <>\n      {currentPeople.length > 0 && <People markdown={currentPeople} />}\n      \n      {/* Render the alumni table if there is any alumni data */}\n      {alumni.length > 0 && <AlumniTable alumni={alumni} />}\n    </>\n  );\n};\n\nexport default PeopleContainer;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '../../components/layout/layout';\nimport SEO from '../../components/seo/seo';\nimport PeopleContainer from '../../components/people/people-container';\nimport AlumniTable from '../../components/people/alumni-table';\n\nconst IndexPage = ({ data }) => (\n  <Layout>\n    <SEO title=\"Our Team\" />\n    <PeopleContainer data={data} />\n  </Layout>\n);\n\nexport const query = graphql`\n  query {\n    currentPeople: allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/people/current/\" } }\n    ) {\n      edges {\n        node {\n          html\n          frontmatter {\n            email\n            image {\n              childImageSharp {\n                gatsbyImageData(\n                  quality: 70,\n                  placeholder: BLURRED,\n                  height: 300,\n                  width: 300,\n                )\n              }\n            }\n            name\n            title\n            order\n          }\n        }\n      }\n    }\n\n    alumni: allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/people/alumni/\" } }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            name\n            graduationYear\n            publications\n            currentPosition {\n              description\n              linkText\n              linkUrl\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default IndexPage;\n","var React = require('react');\n\nfunction PlaceholderInline (props) {\n    return React.createElement(\"svg\",props,[React.createElement(\"title\",{\"key\":0},\"Placeholder portrait\"),React.createElement(\"desc\",{\"key\":1},\"image\"),React.createElement(\"path\",{\"d\":\"M224 256c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm89.6 32h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48v-41.6c0-74.2-60.2-134.4-134.4-134.4z\",\"key\":2})]);\n}\n\nPlaceholderInline.defaultProps = {\"aria-label\":\"Placeholder portrait image\",\"viewBox\":\"0 0 448 512\"};\n\nmodule.exports = PlaceholderInline;\n\nPlaceholderInline.default = PlaceholderInline;\n"],"names":["Portrait","_ref","name","image","React","GatsbyImage","alt","className","childImageSharp","gatsbyImageData","Placeholder","defaultProps","markdown","FontAwesomeIcon","icon","faUsers","size","map","person","key","node","frontmatter","title","email","Link","to","dangerouslySetInnerHTML","__html","html","alumni","safeValue","value","fallback","trim","scope","length","alumnus","index","graduationYear","publications","currentPosition","position","description","linkText","linkUrl","href","target","rel","renderCurrentPositionLinks","colSpan","PeopleContainer","query","useStaticQuery","currentPeople","sortMarkdown","edges","People","AlumniTable","data","Layout","SEO","PlaceholderInline","props","createElement","module","exports","default"],"sourceRoot":""}